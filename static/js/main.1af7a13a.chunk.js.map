{"version":3,"sources":["Data.js","GraphChart.js","BarChartGraph.js","Choose.js","App.js","reportWebVitals.js","index.js"],"names":["Data","props","className","start","end","confirmed","duration","recovered","deaths","GraphChart","useState","daily","setDaily","useEffect","graphData","a","fetch","res","json","linechart","data","labels","map","datato","reportDate","datasets","total","label","borderColor","fill","backgroundColor","BarChartGraph","setConfirmed","setDeaths","setRecovered","countryname","barchart","console","log","value","c","d","r","options","legend","display","title","Choose","selected","setSelected","listed","setListed","findList","countries","onChange","e","target","country","name","App","firsturl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1af7a13a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Data.css';\r\nimport CountUp from 'react-countup';\r\nconst Data = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"top\">\r\n                <div className=\"left\">\r\n                    <h1>Covid19 Data</h1>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <h2 className=\"red\">Confirmed  <CountUp start={0} end={props.confirmed }duration={2.75}/> </h2>\r\n                    <h2 className=\"red\">Recovered  <CountUp start={0} end={props.recovered }duration={2.75}/> </h2>\r\n                    <h2 className=\"red\">Deaths     <CountUp start={0} end={props.deaths }duration={2.75}/> </h2>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\nexport default Data;","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './GraphChart.css';\r\nconst GraphChart = () => {\r\n    const [daily, setDaily] = useState([]);\r\n    useEffect(() => {\r\n        graphData();\r\n    },[])\r\n\r\n    const graphData = async () => {\r\n        const res = await fetch('https://covid19.mathdro.id/api/daily');\r\n        const json = await res.json();\r\n        setDaily(json);\r\n\r\n    }\r\n    const linechart = (\r\n        <Line\r\n            data={{\r\n                labels: daily.map((datato) => {\r\n                    return (datato.reportDate)\r\n                }),\r\n                datasets: [{\r\n                    data: daily.map((data) => (data.confirmed.total)),\r\n                    label: \"Infected\",\r\n                    borderColor: 'green',\r\n                    fill: true,\r\n                },\r\n                {\r\n                    data: daily.map((data) => (data.deaths.total)),\r\n                    label: \"Deaths\",\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }]\r\n            }}\r\n\r\n        />\r\n    );\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {linechart}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default GraphChart;","import React, { useEffect, useState } from 'react';\r\nimport { Bar ,Line} from 'react-chartjs-2';\r\nimport './BarChartGraph.css';\r\nconst BarChartGraph = (props) => {\r\n    const [confirmed, setConfirmed] = useState(0);\r\n    const [deaths, setDeaths] = useState(0);\r\n    const [recovered, setRecovered] = useState(0);\r\n\r\n    \r\n    useEffect(() => {\r\n        graphData();\r\n    },[props.countryname])\r\n    \r\n\r\n    const graphData = async () => {\r\n        if(props.countryname){\r\n            console.log(props.countryname);\r\n        const res = await fetch(`https://covid19.mathdro.id/api/countries/${props.countryname}`);\r\n        const json = await res.json();\r\n        let c=await json.confirmed.value;\r\n        let d=await json.deaths.value;\r\n        let r=await json.recovered.value;\r\n        setRecovered(r);\r\n        setConfirmed(c);\r\n        console.log(c,d);\r\n        setDeaths(d);\r\n        }\r\n        \r\n\r\n    }\r\n    let barchart;\r\n    (props.countryname!==\"\" ?  barchart = (\r\n        <Bar\r\n            data={{\r\n                labels: ['Confirmed','Deaths','Recovered'],\r\n                datasets: [{\r\n                    data: [confirmed,deaths,recovered],\r\n                    label: \"People\",\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)'],\r\n                    fill: true,\r\n                }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true}\r\n            }}\r\n\r\n        />\r\n    )  :  barchart=\"\");\r\n\r\n    return (\r\n        < > \r\n           { barchart===\"\"?<></>: <div className=\"containerone\">{barchart}</div>}\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default BarChartGraph;","import React, { useEffect, useState } from 'react';\r\nimport BarChartGraph from './BarChartGraph';\r\nimport './Choose.css'\r\nconst Choose=()=>{\r\n    const [selected,setSelected]=useState(\"\");\r\n    const [listed,setListed]=useState([]);\r\n    useEffect(()=>{\r\n        findList();\r\n    },[])\r\n    const findList=async ()=>{\r\n        const res=await fetch('https://covid19.mathdro.id/api/countries');\r\n        const json=await res.json();\r\n        const countries=await json.countries;\r\n        setListed(countries);\r\n        \r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"centerone\">\r\n        <select onChange={(e)=>{ setSelected(e.target.value)}}>\r\n               <option></option>\r\n            {\r\n                listed.map((country)=>{\r\n                   return (<option key={country.name}>{country.name}</option>)\r\n                })\r\n            }\r\n        </select>\r\n        </div>\r\n        <BarChartGraph countryname={selected}/>\r\n        </>\r\n    )\r\n};\r\nexport default Choose;","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Data from './Data'\nimport GraphChart from './GraphChart';\nimport Choose from './Choose';\nfunction App() {\n  let [confirmed, setConfirmed] = useState(0);\n  let [recovered, setRecovered] = useState(0);\n  let [deaths, setDeaths] = useState(0);\n\n  useEffect(() => {\n    firsturl();\n  },[]);\n\n  \n  const firsturl = async () => {\n    const res = await fetch('https://covid19.mathdro.id/api');\n    const json = await res.json();\n    setConfirmed(json.confirmed.value);\n    setRecovered(json.recovered.value);\n    setDeaths(json.deaths.value);\n  };\n  return (\n    < >\n      <Data confirmed={confirmed} recovered={recovered} deaths={deaths} />\n      <Choose />\n      <GraphChart />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}